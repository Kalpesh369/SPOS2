package LRU;
import java.util.*;
public class LRU
{
	Set<Integer> cache;
	int capacity;
	public LRU(int capacity)
	{
		this.cache=new LinkedHashSet<Integer>(capacity);
		this.capacity=capacity;
	}
	public boolean get(int key)
	{
		if(!cache.contains(key))
			return false;
		cache.remove(key);
		cache.add(key);
		return true;
	}
	public void get_value(int key)
	{
		if(get(key)==false)
			put(key);
	}
	public void display()
	{
		LinkedList<Integer> list=new LinkedList<>(cache);
		Iterator<Integer> itr=list.descendingIterator();
		while(itr.hasNext())
			System.out.println(itr.next() +" ");
	}
	public void put(int key)
	{
		if(cache.size()==capacity)
		{
			int firstkey=cache.iterator().next();
			cache.remove(firstkey);
		}
		cache.add(key);
	}
	public static void main(String[]args)
	{
		LRU obj = new LRU(5);
		obj.get_value(5);
		obj.get_value(4);
		obj.get_value(3);
		obj.get_value(2);
		obj.get_value(1);
		obj.display();
	}
}